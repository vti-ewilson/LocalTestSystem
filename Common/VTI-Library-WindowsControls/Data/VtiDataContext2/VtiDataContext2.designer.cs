#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VTIWindowsControlLibrary.Data.VtiDataContext2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VtiData")]
	public partial class VtiDataContext2 : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEnumOption(EnumOption instance);
    partial void UpdateEnumOption(EnumOption instance);
    partial void DeleteEnumOption(EnumOption instance);
    partial void InsertGroupCommand(GroupCommand instance);
    partial void UpdateGroupCommand(GroupCommand instance);
    partial void DeleteGroupCommand(GroupCommand instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertModelParameter(ModelParameter instance);
    partial void UpdateModelParameter(ModelParameter instance);
    partial void DeleteModelParameter(ModelParameter instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertModelXRef(ModelXRef instance);
    partial void UpdateModelXRef(ModelXRef instance);
    partial void DeleteModelXRef(ModelXRef instance);
    partial void InsertSchemaChange(SchemaChange instance);
    partial void UpdateSchemaChange(SchemaChange instance);
    partial void DeleteSchemaChange(SchemaChange instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUutDefect(UutDefect instance);
    partial void UpdateUutDefect(UutDefect instance);
    partial void DeleteUutDefect(UutDefect instance);
    partial void InsertUutRecordDetail(UutRecordDetail instance);
    partial void UpdateUutRecordDetail(UutRecordDetail instance);
    partial void DeleteUutRecordDetail(UutRecordDetail instance);
    partial void InsertUutRecord(UutRecord instance);
    partial void UpdateUutRecord(UutRecord instance);
    partial void DeleteUutRecord(UutRecord instance);
    #endregion
		
		public VtiDataContext2(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VtiDataContext2(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VtiDataContext2(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VtiDataContext2(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EnumOption> EnumOptions
		{
			get
			{
				return this.GetTable<EnumOption>();
			}
		}
		
		public System.Data.Linq.Table<GroupCommand> GroupCommands
		{
			get
			{
				return this.GetTable<GroupCommand>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<ManualCmdExecLog> ManualCmdExecLogs
		{
			get
			{
				return this.GetTable<ManualCmdExecLog>();
			}
		}
		
		public System.Data.Linq.Table<ModelParameter> ModelParameters
		{
			get
			{
				return this.GetTable<ModelParameter>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<ModelXRef> ModelXRefs
		{
			get
			{
				return this.GetTable<ModelXRef>();
			}
		}
		
		public System.Data.Linq.Table<ParamChangeLog> ParamChangeLogs
		{
			get
			{
				return this.GetTable<ParamChangeLog>();
			}
		}
		
		public System.Data.Linq.Table<SchemaChange> SchemaChanges
		{
			get
			{
				return this.GetTable<SchemaChange>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UutDefect> UutDefects
		{
			get
			{
				return this.GetTable<UutDefect>();
			}
		}
		
		public System.Data.Linq.Table<UutRecordDetail> UutRecordDetails
		{
			get
			{
				return this.GetTable<UutRecordDetail>();
			}
		}
		
		public System.Data.Linq.Table<UutRecord> UutRecords
		{
			get
			{
				return this.GetTable<UutRecord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnumOptions")]
	public partial class EnumOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SystemType;
		
		private string _ParameterID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSystemTypeChanging(string value);
    partial void OnSystemTypeChanged();
    partial void OnParameterIDChanging(string value);
    partial void OnParameterIDChanged();
    #endregion
		
		public EnumOption()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemType", DbType="NVarChar(20)")]
		public string SystemType
		{
			get
			{
				return this._SystemType;
			}
			set
			{
				if ((this._SystemType != value))
				{
					this.OnSystemTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemType = value;
					this.SendPropertyChanged("SystemType");
					this.OnSystemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupCommands")]
	public partial class GroupCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _GroupID;
		
		private string _CommandID;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(string value);
    partial void OnGroupIDChanged();
    partial void OnCommandIDChanging(string value);
    partial void OnCommandIDChanged();
    #endregion
		
		public GroupCommand()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CommandID
		{
			get
			{
				return this._CommandID;
			}
			set
			{
				if ((this._CommandID != value))
				{
					this.OnCommandIDChanging(value);
					this.SendPropertyChanging();
					this._CommandID = value;
					this.SendPropertyChanged("CommandID");
					this.OnCommandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupCommand", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupCommands.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupCommands.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GroupID;
		
		private bool _IsLocked;
		
		private EntitySet<GroupCommand> _GroupCommands;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(string value);
    partial void OnGroupIDChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    #endregion
		
		public Group()
		{
			this._GroupCommands = new EntitySet<GroupCommand>(new Action<GroupCommand>(this.attach_GroupCommands), new Action<GroupCommand>(this.detach_GroupCommands));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="NVarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupCommand", Storage="_GroupCommands", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<GroupCommand> GroupCommands
		{
			get
			{
				return this._GroupCommands;
			}
			set
			{
				this._GroupCommands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Users", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupCommands(GroupCommand entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupCommands(GroupCommand entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManualCmdExecLog")]
	public partial class ManualCmdExecLog
	{
		
		private long _ID;
		
		private System.DateTime _DateTime;
		
		private string _OpID;
		
		private string _OverrideOpID;
		
		private string _SystemID;
		
		private string _ManualCommand;
		
		public ManualCmdExecLog()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this._DateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string OpID
		{
			get
			{
				return this._OpID;
			}
			set
			{
				if ((this._OpID != value))
				{
					this._OpID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideOpID", DbType="NVarChar(100)")]
		public string OverrideOpID
		{
			get
			{
				return this._OverrideOpID;
			}
			set
			{
				if ((this._OverrideOpID != value))
				{
					this._OverrideOpID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					this._SystemID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualCommand", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ManualCommand
		{
			get
			{
				return this._ManualCommand;
			}
			set
			{
				if ((this._ManualCommand != value))
				{
					this._ManualCommand = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelParameters")]
	public partial class ModelParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _ModelNo;
		
		private string _ParameterID;
		
		private string _ProcessValue;
		
		private string _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _SystemType;
		
		private string _ParameterType;
		
		private System.Nullable<double> _MinValue;
		
		private System.Nullable<double> _MaxValue;
		
		private string _Units;
		
		private string _DisplayName;
		
		private string _ToolTip;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnModelNoChanging(string value);
    partial void OnModelNoChanged();
    partial void OnParameterIDChanging(string value);
    partial void OnParameterIDChanged();
    partial void OnProcessValueChanging(string value);
    partial void OnProcessValueChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnSystemTypeChanging(string value);
    partial void OnSystemTypeChanged();
    partial void OnParameterTypeChanging(string value);
    partial void OnParameterTypeChanged();
    partial void OnMinValueChanging(System.Nullable<double> value);
    partial void OnMinValueChanged();
    partial void OnMaxValueChanging(System.Nullable<double> value);
    partial void OnMaxValueChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnToolTipChanging(string value);
    partial void OnToolTipChanged();
    #endregion
		
		public ModelParameter()
		{
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelNo", DbType="NVarChar(50)")]
		public string ModelNo
		{
			get
			{
				return this._ModelNo;
			}
			set
			{
				if ((this._ModelNo != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModelNoChanging(value);
					this.SendPropertyChanging();
					this._ModelNo = value;
					this.SendPropertyChanged("ModelNo");
					this.OnModelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterID", DbType="NVarChar(50)")]
		public string ParameterID
		{
			get
			{
				return this._ParameterID;
			}
			set
			{
				if ((this._ParameterID != value))
				{
					this.OnParameterIDChanging(value);
					this.SendPropertyChanging();
					this._ParameterID = value;
					this.SendPropertyChanged("ParameterID");
					this.OnParameterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessValue", DbType="NVarChar(255)")]
		public string ProcessValue
		{
			get
			{
				return this._ProcessValue;
			}
			set
			{
				if ((this._ProcessValue != value))
				{
					this.OnProcessValueChanging(value);
					this.SendPropertyChanging();
					this._ProcessValue = value;
					this.SendPropertyChanged("ProcessValue");
					this.OnProcessValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="NVarChar(50)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemType", DbType="NVarChar(50)")]
		public string SystemType
		{
			get
			{
				return this._SystemType;
			}
			set
			{
				if ((this._SystemType != value))
				{
					this.OnSystemTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemType = value;
					this.SendPropertyChanged("SystemType");
					this.OnSystemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterType", DbType="NVarChar(50)")]
		public string ParameterType
		{
			get
			{
				return this._ParameterType;
			}
			set
			{
				if ((this._ParameterType != value))
				{
					this.OnParameterTypeChanging(value);
					this.SendPropertyChanging();
					this._ParameterType = value;
					this.SendPropertyChanged("ParameterType");
					this.OnParameterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinValue", DbType="Float")]
		public System.Nullable<double> MinValue
		{
			get
			{
				return this._MinValue;
			}
			set
			{
				if ((this._MinValue != value))
				{
					this.OnMinValueChanging(value);
					this.SendPropertyChanging();
					this._MinValue = value;
					this.SendPropertyChanged("MinValue");
					this.OnMinValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxValue", DbType="Float")]
		public System.Nullable<double> MaxValue
		{
			get
			{
				return this._MaxValue;
			}
			set
			{
				if ((this._MaxValue != value))
				{
					this.OnMaxValueChanging(value);
					this.SendPropertyChanging();
					this._MaxValue = value;
					this.SendPropertyChanged("MaxValue");
					this.OnMaxValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="NVarChar(20)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(200)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolTip", DbType="NVarChar(500)")]
		public string ToolTip
		{
			get
			{
				return this._ToolTip;
			}
			set
			{
				if ((this._ToolTip != value))
				{
					this.OnToolTipChanging(value);
					this.SendPropertyChanging();
					this._ToolTip = value;
					this.SendPropertyChanged("ToolTip");
					this.OnToolTipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModelParameter", Storage="_Model", ThisKey="ModelNo", OtherKey="ModelNo", IsForeignKey=true, DeleteRule="CASCADE")]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.ModelParameters.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.ModelParameters.Add(this);
						this._ModelNo = value.ModelNo;
					}
					else
					{
						this._ModelNo = default(string);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Models")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ModelNo;
		
		private string _LastModifiedBy;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private EntitySet<ModelParameter> _ModelParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnModelNoChanging(string value);
    partial void OnModelNoChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public Model()
		{
			this._ModelParameters = new EntitySet<ModelParameter>(new Action<ModelParameter>(this.attach_ModelParameters), new Action<ModelParameter>(this.detach_ModelParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ModelNo
		{
			get
			{
				return this._ModelNo;
			}
			set
			{
				if ((this._ModelNo != value))
				{
					this.OnModelNoChanging(value);
					this.SendPropertyChanging();
					this._ModelNo = value;
					this.SendPropertyChanged("ModelNo");
					this.OnModelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="NVarChar(50)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_ModelParameter", Storage="_ModelParameters", ThisKey="ModelNo", OtherKey="ModelNo")]
		public EntitySet<ModelParameter> ModelParameters
		{
			get
			{
				return this._ModelParameters;
			}
			set
			{
				this._ModelParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ModelParameters(ModelParameter entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_ModelParameters(ModelParameter entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ModelXRef")]
	public partial class ModelXRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _ModelNo;
		
		private string _ScannedChars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnModelNoChanging(string value);
    partial void OnModelNoChanged();
    partial void OnScannedCharsChanging(string value);
    partial void OnScannedCharsChanged();
    #endregion
		
		public ModelXRef()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModelNo
		{
			get
			{
				return this._ModelNo;
			}
			set
			{
				if ((this._ModelNo != value))
				{
					this.OnModelNoChanging(value);
					this.SendPropertyChanging();
					this._ModelNo = value;
					this.SendPropertyChanged("ModelNo");
					this.OnModelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScannedChars", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ScannedChars
		{
			get
			{
				return this._ScannedChars;
			}
			set
			{
				if ((this._ScannedChars != value))
				{
					this.OnScannedCharsChanging(value);
					this.SendPropertyChanging();
					this._ScannedChars = value;
					this.SendPropertyChanged("ScannedChars");
					this.OnScannedCharsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParamChangeLog")]
	public partial class ParamChangeLog
	{
		
		private long _ID;
		
		private System.DateTime _DateTime;
		
		private string _OpID;
		
		private string _OverrideOpID;
		
		private string _SystemID;
		
		private string _ParameterSectionName;
		
		private string _ParameterName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		public ParamChangeLog()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this._DateTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string OpID
		{
			get
			{
				return this._OpID;
			}
			set
			{
				if ((this._OpID != value))
				{
					this._OpID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverrideOpID", DbType="NVarChar(100)")]
		public string OverrideOpID
		{
			get
			{
				return this._OverrideOpID;
			}
			set
			{
				if ((this._OverrideOpID != value))
				{
					this._OverrideOpID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					this._SystemID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterSectionName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ParameterSectionName
		{
			get
			{
				return this._ParameterSectionName;
			}
			set
			{
				if ((this._ParameterSectionName != value))
				{
					this._ParameterSectionName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ParameterName
		{
			get
			{
				return this._ParameterName;
			}
			set
			{
				if ((this._ParameterName != value))
				{
					this._ParameterName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this._OldValue = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this._NewValue = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchemaChanges")]
	public partial class SchemaChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _major;
		
		private System.Nullable<int> _minor;
		
		private System.Nullable<int> _release;
		
		private string _script_name;
		
		private System.Nullable<System.DateTime> _applied;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmajorChanging(System.Nullable<int> value);
    partial void OnmajorChanged();
    partial void OnminorChanging(System.Nullable<int> value);
    partial void OnminorChanged();
    partial void OnreleaseChanging(System.Nullable<int> value);
    partial void OnreleaseChanged();
    partial void Onscript_nameChanging(string value);
    partial void Onscript_nameChanged();
    partial void OnappliedChanging(System.Nullable<System.DateTime> value);
    partial void OnappliedChanged();
    #endregion
		
		public SchemaChange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_major", DbType="Int")]
		public System.Nullable<int> major
		{
			get
			{
				return this._major;
			}
			set
			{
				if ((this._major != value))
				{
					this.OnmajorChanging(value);
					this.SendPropertyChanging();
					this._major = value;
					this.SendPropertyChanged("major");
					this.OnmajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minor", DbType="Int")]
		public System.Nullable<int> minor
		{
			get
			{
				return this._minor;
			}
			set
			{
				if ((this._minor != value))
				{
					this.OnminorChanging(value);
					this.SendPropertyChanging();
					this._minor = value;
					this.SendPropertyChanged("minor");
					this.OnminorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_release", DbType="Int")]
		public System.Nullable<int> release
		{
			get
			{
				return this._release;
			}
			set
			{
				if ((this._release != value))
				{
					this.OnreleaseChanging(value);
					this.SendPropertyChanging();
					this._release = value;
					this.SendPropertyChanged("release");
					this.OnreleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_script_name", DbType="VarChar(255)")]
		public string script_name
		{
			get
			{
				return this._script_name;
			}
			set
			{
				if ((this._script_name != value))
				{
					this.Onscript_nameChanging(value);
					this.SendPropertyChanging();
					this._script_name = value;
					this.SendPropertyChanged("script_name");
					this.Onscript_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_applied", DbType="DateTime")]
		public System.Nullable<System.DateTime> applied
		{
			get
			{
				return this._applied;
			}
			set
			{
				if ((this._applied != value))
				{
					this.OnappliedChanging(value);
					this.SendPropertyChanging();
					this._applied = value;
					this.SendPropertyChanged("applied");
					this.OnappliedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _OpID;
		
		private string _Password;
		
		private string _GroupID;
		
		private bool _IsLocked;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOpIDChanging(string value);
    partial void OnOpIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupIDChanging(string value);
    partial void OnGroupIDChanged();
    partial void OnIsLockedChanging(bool value);
    partial void OnIsLockedChanged();
    #endregion
		
		public User()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpID", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string OpID
		{
			get
			{
				return this._OpID;
			}
			set
			{
				if ((this._OpID != value))
				{
					this.OnOpIDChanging(value);
					this.SendPropertyChanging();
					this._OpID = value;
					this.SendPropertyChanged("OpID");
					this.OnOpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit NOT NULL")]
		public bool IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(string);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UutDefects")]
	public partial class UutDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UutRecordID;
		
		private string _Defect;
		
		private string _Category;
		
		private string _Description;
		
		private EntityRef<UutRecord> _UutRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUutRecordIDChanging(long value);
    partial void OnUutRecordIDChanged();
    partial void OnDefectChanging(string value);
    partial void OnDefectChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public UutDefect()
		{
			this._UutRecord = default(EntityRef<UutRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UutRecordID", DbType="BigInt NOT NULL")]
		public long UutRecordID
		{
			get
			{
				return this._UutRecordID;
			}
			set
			{
				if ((this._UutRecordID != value))
				{
					if (this._UutRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUutRecordIDChanging(value);
					this.SendPropertyChanging();
					this._UutRecordID = value;
					this.SendPropertyChanged("UutRecordID");
					this.OnUutRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Defect", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string Defect
		{
			get
			{
				return this._Defect;
			}
			set
			{
				if ((this._Defect != value))
				{
					this.OnDefectChanging(value);
					this.SendPropertyChanging();
					this._Defect = value;
					this.SendPropertyChanged("Defect");
					this.OnDefectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(25)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UutRecord_UutDefect", Storage="_UutRecord", ThisKey="UutRecordID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UutRecord UutRecord
		{
			get
			{
				return this._UutRecord.Entity;
			}
			set
			{
				UutRecord previousValue = this._UutRecord.Entity;
				if (((previousValue != value) 
							|| (this._UutRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UutRecord.Entity = null;
						previousValue.UutDefects.Remove(this);
					}
					this._UutRecord.Entity = value;
					if ((value != null))
					{
						value.UutDefects.Add(this);
						this._UutRecordID = value.ID;
					}
					else
					{
						this._UutRecordID = default(long);
					}
					this.SendPropertyChanged("UutRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UutRecordDetails")]
	public partial class UutRecordDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _UutRecordID;
		
		private System.DateTime _DateTime;
		
		private string _Test;
		
		private string _Result;
		
		private string _ValueName;
		
		private System.Nullable<double> _Value;
		
		private string _MinSetpointName;
		
		private System.Nullable<double> _MinSetpoint;
		
		private string _MaxSetpointName;
		
		private System.Nullable<double> _MaxSetpoint;
		
		private string _Units;
		
		private System.Nullable<double> _ElapsedTime;
		
		private EntityRef<UutRecord> _UutRecord;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnUutRecordIDChanging(long value);
    partial void OnUutRecordIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnTestChanging(string value);
    partial void OnTestChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnValueNameChanging(string value);
    partial void OnValueNameChanged();
    partial void OnValueChanging(System.Nullable<double> value);
    partial void OnValueChanged();
    partial void OnMinSetpointNameChanging(string value);
    partial void OnMinSetpointNameChanged();
    partial void OnMinSetpointChanging(System.Nullable<double> value);
    partial void OnMinSetpointChanged();
    partial void OnMaxSetpointNameChanging(string value);
    partial void OnMaxSetpointNameChanged();
    partial void OnMaxSetpointChanging(System.Nullable<double> value);
    partial void OnMaxSetpointChanged();
    partial void OnUnitsChanging(string value);
    partial void OnUnitsChanged();
    partial void OnElapsedTimeChanging(System.Nullable<double> value);
    partial void OnElapsedTimeChanged();
    #endregion
		
		public UutRecordDetail()
		{
			this._UutRecord = default(EntityRef<UutRecord>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UutRecordID", DbType="BigInt NOT NULL")]
		public long UutRecordID
		{
			get
			{
				return this._UutRecordID;
			}
			set
			{
				if ((this._UutRecordID != value))
				{
					if (this._UutRecord.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUutRecordIDChanging(value);
					this.SendPropertyChanging();
					this._UutRecordID = value;
					this.SendPropertyChanged("UutRecordID");
					this.OnUutRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Test
		{
			get
			{
				return this._Test;
			}
			set
			{
				if ((this._Test != value))
				{
					this.OnTestChanging(value);
					this.SendPropertyChanging();
					this._Test = value;
					this.SendPropertyChanged("Test");
					this.OnTestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueName", DbType="NVarChar(50)")]
		public string ValueName
		{
			get
			{
				return this._ValueName;
			}
			set
			{
				if ((this._ValueName != value))
				{
					this.OnValueNameChanging(value);
					this.SendPropertyChanging();
					this._ValueName = value;
					this.SendPropertyChanged("ValueName");
					this.OnValueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinSetpointName", DbType="NVarChar(50)")]
		public string MinSetpointName
		{
			get
			{
				return this._MinSetpointName;
			}
			set
			{
				if ((this._MinSetpointName != value))
				{
					this.OnMinSetpointNameChanging(value);
					this.SendPropertyChanging();
					this._MinSetpointName = value;
					this.SendPropertyChanged("MinSetpointName");
					this.OnMinSetpointNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinSetpoint", DbType="Float")]
		public System.Nullable<double> MinSetpoint
		{
			get
			{
				return this._MinSetpoint;
			}
			set
			{
				if ((this._MinSetpoint != value))
				{
					this.OnMinSetpointChanging(value);
					this.SendPropertyChanging();
					this._MinSetpoint = value;
					this.SendPropertyChanged("MinSetpoint");
					this.OnMinSetpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxSetpointName", DbType="NVarChar(50)")]
		public string MaxSetpointName
		{
			get
			{
				return this._MaxSetpointName;
			}
			set
			{
				if ((this._MaxSetpointName != value))
				{
					this.OnMaxSetpointNameChanging(value);
					this.SendPropertyChanging();
					this._MaxSetpointName = value;
					this.SendPropertyChanged("MaxSetpointName");
					this.OnMaxSetpointNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxSetpoint", DbType="Float")]
		public System.Nullable<double> MaxSetpoint
		{
			get
			{
				return this._MaxSetpoint;
			}
			set
			{
				if ((this._MaxSetpoint != value))
				{
					this.OnMaxSetpointChanging(value);
					this.SendPropertyChanging();
					this._MaxSetpoint = value;
					this.SendPropertyChanged("MaxSetpoint");
					this.OnMaxSetpointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="NVarChar(50)")]
		public string Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElapsedTime", DbType="Float")]
		public System.Nullable<double> ElapsedTime
		{
			get
			{
				return this._ElapsedTime;
			}
			set
			{
				if ((this._ElapsedTime != value))
				{
					this.OnElapsedTimeChanging(value);
					this.SendPropertyChanging();
					this._ElapsedTime = value;
					this.SendPropertyChanged("ElapsedTime");
					this.OnElapsedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UutRecord_UutRecordDetail", Storage="_UutRecord", ThisKey="UutRecordID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UutRecord UutRecord
		{
			get
			{
				return this._UutRecord.Entity;
			}
			set
			{
				UutRecord previousValue = this._UutRecord.Entity;
				if (((previousValue != value) 
							|| (this._UutRecord.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UutRecord.Entity = null;
						previousValue.UutRecordDetails.Remove(this);
					}
					this._UutRecord.Entity = value;
					if ((value != null))
					{
						value.UutRecordDetails.Add(this);
						this._UutRecordID = value.ID;
					}
					else
					{
						this._UutRecordID = default(long);
					}
					this.SendPropertyChanged("UutRecord");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UutRecords")]
	public partial class UutRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _SerialNo;
		
		private string _ModelNo;
		
		private System.DateTime _DateTime;
		
		private string _SystemID;
		
		private string _OpID;
		
		private string _TestType;
		
		private string _TestResult;
		
		private string _TestPort;
		
		private EntitySet<UutDefect> _UutDefects;
		
		private EntitySet<UutRecordDetail> _UutRecordDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSerialNoChanging(string value);
    partial void OnSerialNoChanged();
    partial void OnModelNoChanging(string value);
    partial void OnModelNoChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnSystemIDChanging(string value);
    partial void OnSystemIDChanged();
    partial void OnOpIDChanging(string value);
    partial void OnOpIDChanged();
    partial void OnTestTypeChanging(string value);
    partial void OnTestTypeChanged();
    partial void OnTestResultChanging(string value);
    partial void OnTestResultChanged();
    partial void OnTestPortChanging(string value);
    partial void OnTestPortChanged();
    #endregion
		
		public UutRecord()
		{
			this._UutDefects = new EntitySet<UutDefect>(new Action<UutDefect>(this.attach_UutDefects), new Action<UutDefect>(this.detach_UutDefects));
			this._UutRecordDetails = new EntitySet<UutRecordDetail>(new Action<UutRecordDetail>(this.attach_UutRecordDetails), new Action<UutRecordDetail>(this.detach_UutRecordDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModelNo", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ModelNo
		{
			get
			{
				return this._ModelNo;
			}
			set
			{
				if ((this._ModelNo != value))
				{
					this.OnModelNoChanging(value);
					this.SendPropertyChanging();
					this._ModelNo = value;
					this.SendPropertyChanged("ModelNo");
					this.OnModelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SystemID
		{
			get
			{
				return this._SystemID;
			}
			set
			{
				if ((this._SystemID != value))
				{
					this.OnSystemIDChanging(value);
					this.SendPropertyChanging();
					this._SystemID = value;
					this.SendPropertyChanged("SystemID");
					this.OnSystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpID", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string OpID
		{
			get
			{
				return this._OpID;
			}
			set
			{
				if ((this._OpID != value))
				{
					this.OnOpIDChanging(value);
					this.SendPropertyChanging();
					this._OpID = value;
					this.SendPropertyChanged("OpID");
					this.OnOpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestType", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string TestType
		{
			get
			{
				return this._TestType;
			}
			set
			{
				if ((this._TestType != value))
				{
					this.OnTestTypeChanging(value);
					this.SendPropertyChanging();
					this._TestType = value;
					this.SendPropertyChanged("TestType");
					this.OnTestTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestResult", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TestResult
		{
			get
			{
				return this._TestResult;
			}
			set
			{
				if ((this._TestResult != value))
				{
					this.OnTestResultChanging(value);
					this.SendPropertyChanging();
					this._TestResult = value;
					this.SendPropertyChanged("TestResult");
					this.OnTestResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestPort", DbType="NVarChar(25)")]
		public string TestPort
		{
			get
			{
				return this._TestPort;
			}
			set
			{
				if ((this._TestPort != value))
				{
					this.OnTestPortChanging(value);
					this.SendPropertyChanging();
					this._TestPort = value;
					this.SendPropertyChanged("TestPort");
					this.OnTestPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UutRecord_UutDefect", Storage="_UutDefects", ThisKey="ID", OtherKey="UutRecordID")]
		public EntitySet<UutDefect> UutDefects
		{
			get
			{
				return this._UutDefects;
			}
			set
			{
				this._UutDefects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UutRecord_UutRecordDetail", Storage="_UutRecordDetails", ThisKey="ID", OtherKey="UutRecordID")]
		public EntitySet<UutRecordDetail> UutRecordDetails
		{
			get
			{
				return this._UutRecordDetails;
			}
			set
			{
				this._UutRecordDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UutDefects(UutDefect entity)
		{
			this.SendPropertyChanging();
			entity.UutRecord = this;
		}
		
		private void detach_UutDefects(UutDefect entity)
		{
			this.SendPropertyChanging();
			entity.UutRecord = null;
		}
		
		private void attach_UutRecordDetails(UutRecordDetail entity)
		{
			this.SendPropertyChanging();
			entity.UutRecord = this;
		}
		
		private void detach_UutRecordDetails(UutRecordDetail entity)
		{
			this.SendPropertyChanging();
			entity.UutRecord = null;
		}
	}
}
#pragma warning restore 1591
