-Can now view historical states of digital inputs and digital outputs when clicking and dragging the mouse over the data plot.

	In Machine.cs -> InitializeDataPlot()
	
	To monitor only certain IO in your data plot: _DataPlot[Port.Blue].MonitoredIO.Add(IO.DOut.BlueEvac);
	
	To monitor all IO in your data plot except for the audible alarm and MCR24VPowerSense:

	var _DOutList = IO.DOut.GetType()
			 .GetFields()
			 .Select(field => field.GetValue(IO.DOut))
			 .Where(x => x != null)
			 .OfType<VTIWindowsControlLibrary.Classes.IO.Interfaces.IDigitalOutput>()
			 .Where(x => x.Description != string.Empty)
			 .ToList();

	foreach (var dout in _DOutList)
	{
		_DataPlot[Port.Blue].MonitoredIO.Add(dout);
		if (Properties.Settings.Default.DualPortSystem)
		{
			_DataPlot[Port.White].MonitoredIO.Add(dout);
		}
	}
	_DataPlot[Port.Blue].MonitoredIO.Remove(IO.DOut.Alarm);
	if (Properties.Settings.Default.DualPortSystem)
	{
		_DataPlot[Port.White].MonitoredIO.Remove(IO.DOut.Alarm);
	}

	var _DInList = IO.DIn.GetType()
			.GetFields()
			.Select(field => field.GetValue(IO.DIn))
			.Where(x => x != null)
			.OfType<VTIWindowsControlLibrary.Classes.IO.Interfaces.IDigitalInput>()
			.Where(x => x.Description != string.Empty)
			.ToList();

	foreach (var din in _DInList)
	{
		_DataPlot[Port.Blue].MonitoredIO.Add(din);
		if (Properties.Settings.Default.DualPortSystem)
		{
			_DataPlot[Port.White].MonitoredIO.Add(din);
		}
	}
	_DataPlot[Port.Blue].MonitoredIO.Remove(IO.DIn.MCRPower24VoltSense);
	if (Properties.Settings.Default.DualPortSystem)
	{
		_DataPlot[Port.White].MonitoredIO.Remove(IO.DIn.MCRPower24VoltSense);
	}
